<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playing = 1;
showarrow = 0;
ii = 0
timer = 0
lvltime = 0
slvlshowf = 1
slvlshowarrow = 1
roomstarttime = get_timer()
step = 1
xx = choose(-1,1);
yy = choose(-1,1);
im = choose(0,90,180,270);

x = oPlayer.x; y = oPlayer.y;

_edge_x = view_wview / 2 - 32;  //change constant "32" to change arrow dist from edge of view (in room pixels)
_edge_y = view_hview / 2 - 32;  //change constant "32" to change arrow dist from edge of view (in room pixels)
_view_center_x = (view_xview + view_xview + view_wview)/2;
_view_center_y = (view_yview + view_yview + view_hview)/2;
_x1 = 0;
_y1 = 0;
_x2 = 0;
_y2 = 0;

surface = -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.showlevelbanner = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
ii = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.deltaT = (30/1000000)*delta_time;
if !instance_exists(oPlayer) &amp;&amp; ii = 0 {ii = 1;alarm[0] = 60*(1/(delta))}//60
if instance_exists(oPlayer) {
    if oPlayer._end = 1 {lvltime[room_get_name(room)] = timer}
    
    if (oPlayer._end != 1) &amp;&amp; playing {
    timer = (get_timer()-roomstarttime)/1000000;
    } else if (oPlayer._end != 1) {
        timer-= 0.01;
    }
    }
if (global.showlevelbanner = true) {
    if (timer &gt;= 1 &amp;&amp; slvlshowf &gt; 0 ){slvlshowf -= 0.1*delta;}
} else {slvlshowf -= 0.2*delta}
if (slvlshowf &lt;= 0 &amp;&amp; slvlshowarrow &gt; 0){
    slvlshowarrow -= 0.04*delta;
}

if (room = rm1 || room = rm8) {
    if (irandom(300*delta) == 1) &amp;&amp; (!instance_exists(oThunder)){
       instance_create(x,y,oThunder);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0
slvlname = 1
slvlshowf = 1
slvlshowarrow = 1
roomstarttime = get_timer()
surface = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (surface_exists(surface)){
    draw_set_alpha(1);
    draw_surface_stretched(surface,0,0,display_get_gui_width(),display_get_gui_height());
    //draw_surface_ext(surface,(_view_center_x+_x2),(_view_center_y + _y2),1,1,point_direction(0,0,_x1,_y1),-1,slvlshowarrow);
}*/
if (surface_exists(surface)){
        direction = point_direction(0,0,_x1,_y1);
        draw_set_alpha(1);
        var _c,_s, ratio;
        _c = dcos(direction);
        _s = dsin(direction);
        ratiox = display_get_gui_width()/display_get_width();
        ratioy = display_get_gui_height()/display_get_height();
        //draw_surface_ext(surface,(_view_center_x+_x2-view_xview),(_view_center_y + _y2-view_yview),display_get_width(),display_get_height(),point_direction(0,0,_x1,_y1),image_blend,1);
        draw_surface_ext(surface,(_view_center_x+_x2-view_xview)-_c*(50*ratiox)-_s*(50*ratioy),(_view_center_y+_y2-view_yview)-_c*(50*ratioy)-_s*(50*ratiox),ratiox,ratioy,direction,image_blend,1);

} else {
//draw_text(50,50,"arrow");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_rectangle(view_xview+4,view_yview+4,view_xview+68,view_yview+22,0);
draw_set_color(c_white);
draw_set_font(fntBody);
if timer &lt; 60 {
    draw_text(view_xview+6,view_yview+6,string(timer));
    }
else if (timer mod 60) &lt; 10 {
    draw_text(view_xview+6,view_yview+6,string(timer div 60)+":0"+string(timer mod 60));
    }
else {
    draw_text(view_xview+6,view_yview+6,string(timer div 60)+":"+string(timer mod 60));
    }
 if(string_count("rm",room_get_name(room)) &gt; 0){   
if slvlname = 1 {//&amp;&amp; global.showlevelbanner = true{
    
    draw_set_color(c_black);
    draw_set_alpha(slvlshowf);
    draw_rectangle(view_xview,view_yview+132,view_xview+600,view_yview+168,0);
    draw_set_color(c_white);
    draw_text(view_xview+12,view_yview+142,get_room_name(room_get_name(room)));

    for(i = 0; i &lt; 3;i++){
       /* if (ds_map_exists(global.roomstars,get_room_name(room_get_name(room)))){
            if (i &lt; ds_map_find_value(global.roomstars,get_room_name(room_get_name(room)))){
                draw_sprite(sStar,1,view_xview+view_wview-120+i*24,view_yview+150)
            }
            else {
                draw_sprite(sStar,0,view_xview+view_wview-120+i*24,view_yview+150)
            }
        }
        else {
            draw_sprite(sStar,0,view_xview+view_wview-120+i*24,view_yview+150)
        }*/
        draw_set_font(fntBodySmall);
        draw_sprite(sStar,0,view_xview+view_wview-123+i*26,view_yview+147)
        draw_text(view_xview+view_wview-132+i*24,view_yview+157,room_name_to_times(room_get_name(room),i));
    }
    
    draw_set_alpha(1);
    }
if global.showlevelbanner = false &amp;&amp; slvlshowf &gt; 0.98{
        alarm[1] = 20
    }
if (instance_exists(oPlayer) &amp;&amp; instance_exists(oGold)){



 if (!surface_exists(surface)){
            surface = surface_create(100,100);
            //if (surface_exists(surface)){
                surface_set_target(surface);
                draw_set_color(-1);
                draw_clear_alpha(c_white,0);
                //draw_rectangle(0,0,room_width,room_height,0);
                draw_sprite(sArrow,2,50,50);
            //draw_sprite_ext(sArrow,2,(_view_center_x+_x2-view_xview)*(display_get_width()/view_wview),(_view_center_y + _y2-view_yview)*(display_get_height()/view_hview),1,1,point_direction(0,0,_x1,_y1),-1,1);
                surface_reset_target();
             //}
        }

_edge_x = view_wview / 2 - 32;  
_edge_y = view_hview / 2 - 50;  //change constant "32" to change arrow dist from edge of view (in room pixels)
_view_center_x = (view_xview + view_xview + view_wview)/2;//(view_xview + view_xview + view_wview)/2;
_view_center_y = (view_yview + view_yview + view_hview)/2;

    if (!collision_rectangle(view_xview,view_yview,view_xview + view_wview,view_yview + view_hview,oGold,0,0)) {
        _x1 = (oGold.x - _view_center_x);
        _y1 = (oGold.y - _view_center_y);
        if abs(_x1 / _edge_x) &gt; abs(_y1 / _edge_y) { _x2 = sign(_x1) * _edge_x; _y2 = _x2 / _x1 * _y1; } 
        else { _y2 = sign(_y1) * _edge_y; _x2 = _y2 / _y1 * _x1; }
        
        /*arrow1 = _view_center_x+_x2;
        arrow2 = _view_center_y + _y2;
        arrow3 = point_direction(0,0,_x1,_y1);

        /*if (surface_exists(surface)){
            surface_set_target(surface);
            
            draw_clear_alpha(c_white,0);
            //draw_rectangle(0,0,room_width,room_height,0);
            draw_sprite_ext(sArrow,0,(_view_center_x+_x2)*(display_get_width()/view_wview),(_view_center_y + _y2)*(display_get_height()/view_hview),1,1,point_direction(0,0,_x1,_y1),-1,slvlshowarrow);
            surface_reset_target();
        }*/
        //draw_sprite_ext(sArrow,1,(_view_center_x+_x2),(_view_center_y + _y2),1,1,point_direction(0,0,_x1,_y1),-1,slvlshowarrow);
        if (showarrow == 0){
            showarrow = 1;
            if (surface_exists(surface)){
                surface_set_target(surface);
                draw_set_color(-1);
                draw_clear_alpha(c_white,0);
                //draw_rectangle(0,0,room_width,room_height,0);
                draw_sprite(sArrow,2,50,50);
            //draw_sprite_ext(sArrow,2,(_view_center_x+_x2-view_xview)*(display_get_width()/view_wview),(_view_center_y + _y2-view_yview)*(display_get_height()/view_hview),1,1,point_direction(0,0,_x1,_y1),-1,1);
                surface_reset_target();
             }
        }
        
    
        
        
    } else {
        if (surface_exists(surface)){
            surface_set_target(surface);
            draw_clear_alpha(c_white,0);
            surface_reset_target();
            showarrow = 0;
            }
}}

}

/*if (surface_exists(surface)){
    draw_set_alpha(1);
    draw_surface_stretched(surface,view_xview,view_yview,display_get_gui_width(),display_get_gui_height());
    //draw_surface_ext(surface,(_view_center_x+_x2),(_view_center_y + _y2),1,1,point_direction(0,0,_x1,_y1),-1,slvlshowarrow);
}*/


if (string_pos("bone",room_get_name(room)) != 0) {
    draw_tv_effect(c_gray,c_black,view_xview[0],view_yview[0],view_wview[0],view_hview[0],0.07,4);
    for(i=0;i&lt;=ceil(room_width/150);i++){
        for(j=0;j&lt;=ceil(room_height/150);j++){           
            draw_sprite_ext(sStatic,choose(0,1),i*150,j*150,xx,yy,im,image_blend,image_alpha);
        } 
        
    }

}
if step = 1 {
    step = 0;
    xx = choose(-1,1);
            yy = choose(-1,1);
            im = choose(0,90,180,270);
    }
else { step = 1;}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.showlevelbanner = true;
global.playerDeaths = 0;
room_goto(MENU)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
