<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oPlayer.move = 0;
with(oMissileParent) {
    move = 0;
}
with(oRain) {
    move = 0;
}
with(oDroplet){
    move = 0;
}
with(oUgrass){
    move = 0;
}
with(oControl) {
    playing = false;
}
with(all) {
    speed = 0;
}
width = display_get_gui_width();
height = display_get_gui_height();
stage = 0;
time = 0;
besttime = ds_map_find_value(global.bestlvltimes,get_room_name(room_get_name(room)));
besttimeNA = false;
deaths = 0;
numTotalDeaths = ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room)))-global.playerDeaths;
life = 0;
numStarsShown = ds_map_find_value(global.roomstars,get_room_name(room_get_name(room)))
showStarsDelay = 1;
numDeathsDelay = round(200/global.playerDeaths);
lastStar = numStarsShown;
highlights[0] = 0; //0 = time, 1 = best time, 2 = deaths, 3 = total deaths
highlights[1] = 0;
highlights[2] = 0;
highlights[3] = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(ceil(oControl.timer*3*delta)){
    if (time &lt; oControl.timer){
        time+=0.01;
    } else if (stage == 0){
        stage++;
        highlights[0] = 1;
        if (besttime &gt; 999990) {
            besttimeNA = true;
        }
    }
}
if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room))) &amp;&amp; showStarsDelay &gt;= 1)
if (showStarsDelay mod numDeathsDelay = 0){
    if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room)))){
        numTotalDeaths += 1;
    } 
    if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room)))){
        highlights[3] = 1;
    }
}
if (deaths &lt; global.playerDeaths &amp;&amp; showStarsDelay &gt;= 1){
if (showStarsDelay mod numDeathsDelay = 0){
    if (deaths &lt; global.playerDeaths) {
        deaths++;
    } 
    if (deaths &lt; global.playerDeaths){
        highlights[2] = 1;
    }
}
}

if (stage == 1){
    repeat(ceil(time*4*delta)){
        if (!besttimeNA) {
            if (time &lt; besttime){
                besttime-=0.01;
            } else {
                stage++;
                highlights[1] = 1;
            }
        } else {
            if (besttime &gt; 999990){
                besttime = 0;
            }
            if (time &gt; besttime){
                besttime+=0.01;
            } else {
                stage++;
                highlights[1] = 1;
            }
        }
    }
}
if(life &lt; 1){
    life += 0.05;
} else life = 1;
//if(stage &gt;= 1){
if(numStarsShown &lt;= ds_map_find_value(global.roomstars,get_room_name(room_get_name(room))) &amp;&amp; showStarsDelay &gt;= 75){
    numStarsShown += 0.04;
    if (floor(numStarsShown) &gt; lastStar) {
        sound_play(sndLever);
        lastStar = floor(numStarsShown);
    }
}
if (showStarsDelay &lt; 99999900){
    repeat(3){
        if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room))) &amp;&amp; showStarsDelay &gt;= 1)
        if (showStarsDelay mod numDeathsDelay = 0){
            if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room)))){
                numTotalDeaths += 1;
            } 
            if (numTotalDeaths &lt; ds_map_find_value(global.levelDeaths,get_room_name(room_get_name(room)))){
                highlights[3] = 1;
            }
        }
        if (deaths &lt; global.playerDeaths &amp;&amp; showStarsDelay &gt;= 1){
        if (showStarsDelay mod numDeathsDelay = 0){
            if (deaths &lt; global.playerDeaths) {
                deaths++;
            } 
            if (deaths &lt; global.playerDeaths){
                highlights[2] = 1;
            }
        }
        }
    }
    showStarsDelay += 1;
}
for(i = 0; i &lt; array_length_1d(highlights); i++){
    if (highlights[i] &gt; 0){
        highlights[i] -= 0.015;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(MENU);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if !(sprite_exists(pausespr)){
    pausespr = sprite_create_from_surface(application_surface,0,0,width,height,false,false,0,0);
}*/
draw_set_color(c_black);
draw_set_alpha(0.3*life);
draw_rectangle(view_xview-15,view_yview-15,view_xview+width+15,view_yview+height+15,0);
draw_rectangle(view_xview+width/10,view_yview+height/8,view_xview+4.5*width/10,view_yview+7*height/8,0);

draw_set_color(c_lime);
draw_set_halign(fa_center);
draw_set_font(fntBody);
draw_set_alpha(life);


draw_rectangle_width(view_xview+width/10,view_yview+height/8,view_xview+4.5*width/10,view_yview+7*height/8,3);
draw_rectangle(view_xview+width/10,view_yview+1*height/4,view_xview+4.5*width/10,view_yview+(1*height/4)+3,false);
draw_text(round(view_xview+2.75*width/10),round(view_yview+height/8+7),"LEADERBOARDS");
draw_set_font(fntBodySmall);
draw_rectangle(view_xview+width/10+5,view_yview+height/4-14,view_xview+2.75*width/10-3,view_yview+height/4-2,true);
draw_text(round(view_xview+1.875*width/10),round(view_yview+height/4-12),"LOCAL");
draw_rectangle(view_xview+2.75*width/10+2,view_yview+height/4-14,view_xview+4.5*width/10-8,view_yview+height/4-2,true);
draw_text(round(view_xview+3.625*width/10),round(view_yview+height/4-12),"GLOBAL");


draw_set_font(fntBody);
draw_set_halign(fa_left);
draw_rectangle_width(view_xview+5*width/10,view_yview+height/6,view_xview+9*width/10,view_yview+5*height/6,3);
for(i=0;i&lt;3;i++){
    draw_sprite(sStarLarge,3,view_xview+7*width/10-30+i*30,view_yview+height/6+19);
}
for(i=0;i&lt;floor(numStarsShown);i++){
    draw_sprite(sStarLarge,2,view_xview+7*width/10-30+i*30,view_yview+height/6+19);
}   
draw_text(view_xview+5*width/10+7,view_yview+height/6+36,"TIME: "+string(time));
if (besttime &lt; 999990){
    draw_text(view_xview+5*width/10+7,view_yview+height/6+49,"BEST TIME: "+string(besttime));
} else {
    draw_text(view_xview+5*width/10+7,view_yview+height/6+49,"BEST TIME: N/A");
}
draw_text(view_xview+5*width/10+7,view_yview+height/6+62,"DEATHS: "+string(deaths));
draw_text(view_xview+5*width/10+7,view_yview+height/6+75,"TOTAL DEATHS ON THIS");
draw_text(view_xview+5*width/10+7,view_yview+height/6+88,"LEVEL: "+string(numTotalDeaths));
draw_set_color(c_yellow);
draw_set_alpha(highlights[0]);
draw_text(view_xview+5*width/10+7,view_yview+height/6+36,"TIME: "+string(time));
draw_set_alpha(highlights[1]);
if (besttime &lt; 999990){
    draw_text(view_xview+5*width/10+7,view_yview+height/6+49,"BEST TIME: "+string(besttime));
} else {
    draw_text(view_xview+5*width/10+7,view_yview+height/6+49,"BEST TIME: N/A");
}
draw_set_alpha(highlights[2]);
draw_text(view_xview+5*width/10+7,view_yview+height/6+62,"DEATHS: "+string(deaths));
draw_set_alpha(highlights[3]);
draw_text(view_xview+5*width/10+7,view_yview+height/6+75,"TOTAL DEATHS ON THIS");
draw_text(view_xview+5*width/10+7,view_yview+height/6+88,"LEVEL: "+string(numTotalDeaths));

draw_set_font(fntBodySmall);
draw_set_halign(fa_center);
draw_set_color(c_lime);
draw_text(round(view_xview+3*width/4),round(view_yview+5*height/6+10),"press &lt;enter&gt; to continue --&gt;");

draw_set_halign(fa_left);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
