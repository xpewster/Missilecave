<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velX = 0;
velY = 0;
velXTarget = 0;
velYTarget = 7;
xAccel = 0.00;
yAccel = 0.04;
angleXTarget = 0;
able0 = 0;
able90 = 0;
able180 = 0;
able270 = 0;
offset = 1;
alarm[0] = 2
smokei = 0;
angleDir = 1;
angleChosen = false;
holderId = id;
depth = choose(2,-97,-99);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>offset = 0;
width = (bbox_right-bbox_left);
height = (bbox_bottom-bbox_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /*if (place_meeting(x,y,oSpike)) {
    velXTarget = 0;
    velYTarget = 0;
    xAccel = 0.2;
    yAccel = 0.2;
}*/
image_angle = simplify_angle(image_angle);
if(place_meeting(x,y,oSpike)){
    xAccel = 0.4;
    velYTarget = 1;
    yAccel = 0.4;
} else {
    velYTarget = 7;
}
velX += (velXTarget-velX)*xAccel*(global.deltaT/2);
velY += (velYTarget-velY)*yAccel*(delta/2);

repeat(abs(velX)) 
{
    if !place_meeting(x+sign(velX)*delta,y,oBlock)
    {
    x += (sign(velX)*delta)
    }
    else if abs(velX) &gt; 0 &amp;&amp; place_meeting(x+velX,y,oBlock) {velX = 0}
}
repeat(abs(velY)) 
{   
    if !place_meeting(x,y+sign(velY)*delta,oBlock)
    {
    y += (sign(velY)*delta)
    }
    else if velY &lt; 0 &amp;&amp; place_meeting(x,y+velY,oBlock) {  
    velY = 0
    }
}
velX += (velXTarget-velX)*xAccel*(delta/2);
velY += (velYTarget-velY)*yAccel*(delta/2);
if (!place_meeting(x,y+1,oBlock) ){
    var testPart;
    testPart = instance_create(x+sign(velX)*delta,y+sign(velY)*delta,oPart);
    testPart.visible = false;
    testPart.sprite_index = sprite_index;
    testPart.image_angle = image_angle-2*velX*delta;
    testPart.holderId = id;
    with(testPart) {
        if (!place_meeting(x,y+1,oBlock)){
            with(holderId) {
            image_angle -= 2*velX*delta;
            velY += 0.14*(delta/2)
            angleChosen = false;
            }
        }
        instance_destroy();
    }
    
    }
    else
    {
    if (place_meeting(x,y,oDirt)) {
        xAccel = 0.8;
    }
    else if (place_meeting(x,y,oPolish)) {
        xAccel = 0.2;
    }
    else if (place_meeting(x,y,oMetal)) {
        xAccel = 0.4;//velX += (velXTarget-velX)*xAccel*3.5*(delta);
    } else {
        xAccel = 0.4
    }
    testangle = image_angle;
    if (abs(velX) &gt; 0){
    for(i=0;i&lt;100 &amp;&amp; !angleChosen;i++){//i&lt;180
        if (able180 == true &amp;&amp; round((testangle+i*-sign(velX)) mod 360) == 180 ){// || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 180;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able180 == true &amp;&amp; round((testangle+(i/(power(2,velX-5)+1))*sign(velX)) mod 360) == 180){// || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 180;
            angleChosen = true;
            angleDir = -sign(velX);
            break;
        }
        if (able270 == true &amp;&amp; round((testangle+i*-sign(velX)) mod 360) == 270){ //|| (abs(270-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 270;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able270 == true &amp;&amp; round((testangle+(i/(power(2,velX-5)+1))*sign(velX)) mod 360) == 270){// || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 270;
            angleChosen = true;
            angleDir = -sign(velX);
            break;
        }
        if (able0 == true &amp;&amp; round((testangle+i*-sign(velX)) mod 360) == 0){// || (abs(0-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 0;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able0 == true &amp;&amp; round((testangle+(i/(power(2,velX-5)+1))*sign(velX)) mod 360) == 0){// || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 0;
            angleChosen = true;
            angleDir = -sign(velX);
            break;
        }
        if (able90 == true &amp;&amp; round((testangle+i*-sign(velX)) mod 360) == 90){// || (abs(90-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 90;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able90 == true &amp;&amp; round((testangle+(i/(power(2,velX-5)+1))*sign(velX)) mod 360) == 90){// || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 90;
            angleChosen = true;
            angleDir = -sign(velX);
            break;
        }
    }
    } else if !angleChosen{
        //while(!((angleXTarget == 90 &amp;&amp; able90 == true) || (angleXTarget == 180 &amp;&amp; able180 == true) &amp;&amp; (angleXTarget == 270 &amp;&amp; able270 == true) &amp;&amp; (angleXTarget == 0 &amp;&amp; able0 == true))){
            angleXTarget = choose(90,270);
        //}
        angleChosen = true;
        angleDir = angle_proximity_direction(image_angle,angleXTarget);
        
    }
    /*for(i=0;i&lt;90 &amp;&amp; !angleChosen;i++){
        if (able0 == true &amp;&amp; ((abs(0-(testangle+(i*-velX))) &lt; 30) || (abs(0-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 0;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able90 == true &amp;&amp; ((abs(90-(testangle+(i*-velX))) &lt; 30) || (abs(90-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 90;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able180 == true &amp;&amp; ((abs(180-(testangle+(i*-velX))) &lt; 30) || (abs(180-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 180;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
        if (able270 == true &amp;&amp; ((abs(270-(testangle+(i*-velX))) &lt; 30) || (abs(270-(testangle-(i*sign(velX)*sqrt(abs(velX))))) &lt; 6))){
            angleXTarget = 270;
            angleChosen = true;
            angleDir = sign(velX);
            break;
        }
    }*/
    
    //if !(collision_line(x-lengthdir_x(width/2,image_angle+(angleXTarget-image_angle)*0.3*delta),y-lengthdir_y(height/2,image_angle+(angleXTarget-image_angle)*0.3*delta),x+lengthdir_x(width/2,image_angle+(angleXTarget-image_angle)*0.3*delta),y+lengthdir_y(height/2,image_angle+(angleXTarget-image_angle)*0.3*delta),oBlock,true,true))
    if (simplify_angle(angleXTarget-image_angle) &lt;= 24*delta){
        image_angle = angleXTarget;
    }
    else if (angleDir = -1 ) {
        var testPart;
        testPart = instance_create(x+sign(velX)*delta,y,oPart);
        testPart.sprite_index = asset_get_index(sprite_get_name(sprite_index)+"Mask");//sPartReducedMask
        testPart.visible = false;
        testPart.image_angle = image_angle+20*delta;
        testPart.holderId = id;
        with(testPart) {
            if (!place_meeting(x,y,oBlock)){
                with(holderId) {
                image_angle += 20*delta;
                }
            }
        instance_destroy();
        }
        //image_angle += 20*delta;
    } else {
        var testPart;
        testPart = instance_create(x+sign(velX)*delta,y,oPart);
        testPart.visible = false;
        testPart.sprite_index = asset_get_index(sprite_get_name(sprite_index)+"Mask");
        testPart.image_angle = image_angle-20*delta;
        testPart.holderId = id;
        with(testPart) {
            if (!place_meeting(x,y,oBlock)){
                with(holderId) {
                image_angle -= 20*delta;
                }
            }
        instance_destroy();
        }
        //image_angle -= 20*delta;
    } 
    
    
    }
smokei = choose(0,1,2,3,4,5,6,7) 
if (smokei == 7 &amp;&amp; sprite_index == sTorch) {instance_create(x,y,oPSmoke);}
if (place_meeting(x,y,oLaser) || place_meeting(x,y,oLaserH) || place_meeting(x,y,oLaserHTick)) {
    repeat(random_range(4,5)) {
        var expl;
        expl = instance_create(x,y,oLParti)
        expl.direction = random(360)
        expl.speed = 0
    }
    instance_destroy();
}
//if (round(image_angle) = angleXTarget) {create_debug_tracer(x,y,c_yellow,5,90);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
/*if (sprite_index = sChest) {
draw_set_color(c_lime)
draw_set_font(fntBodySmall);
    draw_text(x,y,string(image_angle)+" "+string(angleXTarget)+" "+string(angleDir));
}
*/
/*if (sprite_index = sTorch) {
depth = -99999999
draw_set_color(c_lime)
draw_text(x,y,string(angleXTarget));
if (angleXTarget == 0) {
draw_line_colour(x,y,x+15,y,c_red,c_red)
}
if (angleXTarget == 90) {
draw_line_colour(x,y,x,y-15,c_red,c_red)
}
if (angleXTarget == 180) {
draw_line_colour(x,y,x-15,y,c_red,c_red)
}
if (angleXTarget == 270) {
draw_line_colour(x,y,x,y+15,c_red,c_red)
}
}*/


/*if (place_meeting(x,y+1,oBlock) == true) {
    draw_rectangle_colour(x-1,y,x+1,y+4,c_blue,c_blue,c_blue,c_blue,0)
}
//draw_point_colour(x,y,c_blue);
//draw_sprite_ext(sMask15x15,0,x,y,1,1,image_angle,image_blend,0.3)

/* for(jx=-7;jx&lt;=7;jx++){
        for(jy=-7;jy&lt;=7;jy++){
        draw_set_alpha(0.3);
        draw_point_colour(x+jx,y+jy,c_red);
            if (position_meeting(x+jx,y+jy+1,self) &amp;&amp; position_meeting(x+jx,y+jy+1,oBlock)){
                draw_point_colour(x+jx,y+jy+1,c_green);
                if (offset == 0){
                sprite_set_offset(sprite_index,7+jx,7+jy+1);
                break;
                offset = 1;
                }
            }
            
        }
    }
 draw_set_alpha(1);
 draw_set_color(c_black)
// draw_text(x-50,y,string(x)+","+string(y)+" : "+string(sprite_get_xoffset(sprite_index))+","+string(sprite_get_yoffset(sprite_index)))*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
